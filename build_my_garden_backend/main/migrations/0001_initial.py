# Generated by Django 4.0.5 on 2022-06-29 17:50

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(max_length=16, unique=True, validators=[django.core.validators.RegexValidator(regex='^\\+?1?\\d{8,15}$')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PlantType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plant_name', models.CharField(max_length=200)),
                ('plant_type', models.CharField(max_length=200)),
                ('plant_size_height', models.IntegerField()),
                ('plant_size_spread', models.IntegerField()),
                ('plant_max_size_time', models.DurationField()),
                ('plant_harvest_length', models.DurationField()),
                ('sun_exposer', models.CharField(choices=[('FULL_SUN', 'Full Sunlight'), ('PARTIAL_SUN', 'Partial Sunlight'), ('PARTIAL _OR_FULL_SUN', 'Full Sunlight or Partial Sunlight')], default='PARTIAL _OR_FULL_SUN', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season', models.CharField(choices=[('FALL', 'Fall'), ('WINTER', 'Winter'), ('SPRING', 'Spring'), ('SUMMER', 'Summer')], default='SPRING', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='SoilType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('soil_name', models.CharField(max_length=200)),
                ('soil_description', models.TextField(max_length=200)),
                ('soil_degradation_duration', models.DurationField()),
            ],
        ),
        migrations.CreateModel(
            name='Soil',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('soil_current_degradation', models.FloatField()),
                ('account_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='soil_account', to=settings.AUTH_USER_MODEL)),
                ('soil_type_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='soil_type', to='main.soiltype')),
            ],
        ),
        migrations.CreateModel(
            name='PlantSupportingSeason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plant_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='plant_supporting_season', to='main.planttype')),
                ('season', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='plant_supporting_season', to='main.season')),
            ],
        ),
        migrations.CreateModel(
            name='Plant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plant_current_size_height', models.IntegerField()),
                ('plant_current_size_spread', models.IntegerField()),
                ('planted_date', models.DateTimeField()),
                ('plant_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='plant', to='main.planttype')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='plant', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
